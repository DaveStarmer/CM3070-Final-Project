{
 "Parameters": {
  "uniqueId": {
   "Type": "String",
   "AllowedPattern": "^[a-z0-9-]{1,32}$",
   "Description": "Unique element for bucket naming"
  },
  "codeBucketName": {
   "Type": "String",
   "Default": "public-cam-code-ec0c1faa4de3482c9bdc0081a3ec4834",
   "AllowedPattern": "^[a-z0-9.-]{1,63}$",
   "Description": "Code Bucket Name"
  },
  "domainName": {
   "Type": "String",
   "Description": "Name of Domain"
  }
 },
 "Resources": {
  "videoUpload4F12A8C9": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Sub": "vid-dash-upload-${uniqueId}"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DashboardStack/videoUpload/Resource"
   }
  },
  "videoUploadNotificationsF43B0547": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "videoUpload4F12A8C9"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "notificiationLambdaC56D9A50",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "videoUploadAllowBucketNotificationsToDashboardStacknotificiationLambdaD7E09B9FCE13F3D6"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/videoUpload/Notifications/Resource"
   }
  },
  "videoUploadAllowBucketNotificationsToDashboardStacknotificiationLambdaD7E09B9FCE13F3D6": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "notificiationLambdaC56D9A50",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "videoUpload4F12A8C9",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/videoUpload/AllowBucketNotificationsToDashboardStacknotificiationLambdaD7E09B9F"
   }
  },
  "videoStorage429F1872": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Sub": "vid-dash-video-${uniqueId}"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DashboardStack/videoStorage/Resource"
   }
  },
  "configBucketED6325D8": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Sub": "vid-dash-config-${uniqueId}"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DashboardStack/configBucket/Resource"
   }
  },
  "cameraSystemStateB4801758": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "DataType": "text",
    "Description": "Cognito Endpoint",
    "Name": "camera-system-state",
    "Tier": "Standard",
    "Type": "String",
    "Value": "ENABLED"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/cameraSystemState/Resource"
   }
  },
  "cloudWatchLogsPolicy62FA4890": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "",
    "ManagedPolicyName": "cam-logs-policy",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:*:*:*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/cloudWatchLogsPolicy/Resource"
   }
  },
  "ssmGetParameterPolicy6E238F58": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "",
    "ManagedPolicyName": "cam-get-parameter-policy",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ssm:*:*:*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/ssmGetParameterPolicy/Resource"
   }
  },
  "activationTable47DE6EF0": {
   "Type": "AWS::DynamoDB::GlobalTable",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "camera",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "S"
     },
     {
      "AttributeName": "clipStatus",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "camera",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "LocalSecondaryIndexes": [
     {
      "IndexName": "clipStatusIndex",
      "KeySchema": [
       {
        "AttributeName": "camera",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "clipStatus",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "Replicas": [
     {
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "TableName": "activations"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "DashboardStack/activationTable/Resource"
   }
  },
  "notificationTopic102BFE2A": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "TopicName": "notifications-topic"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/notificationTopic/Resource"
   }
  },
  "notificationLambdaRoleE89DA80E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "edgelambda.amazonaws.com",
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "cloudWatchLogsPolicy62FA4890"
     },
     {
      "Ref": "ssmGetParameterPolicy6E238F58"
     }
    ],
    "RoleName": "notification-lambda-role"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/notificationLambdaRole/Resource"
   }
  },
  "notificationLambdaRoleDefaultPolicy25AFAF3A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "videoUpload4F12A8C9",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "videoUpload4F12A8C9",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:DeleteObject*",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "videoUpload4F12A8C9",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "videoStorage429F1872",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchWriteItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "activationTable47DE6EF0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "activationTable47DE6EF0",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "notificationTopic102BFE2A"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "notificationLambdaRoleDefaultPolicy25AFAF3A",
    "Roles": [
     {
      "Ref": "notificationLambdaRoleE89DA80E"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/notificationLambdaRole/DefaultPolicy/Resource"
   }
  },
  "notificiationLambdaC56D9A50": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Ref": "codeBucketName"
     },
     "S3Key": "lambdas/notification-3d2d8f5a220cf2fc1da6d8b019c9ca4e.zip"
    },
    "Description": "copies clips to storage bucket, writes info to database",
    "Environment": {
     "Variables": {
      "DYNAMODB_TABLE": {
       "Ref": "activationTable47DE6EF0"
      },
      "SOURCE_BUCKET": {
       "Ref": "videoUpload4F12A8C9"
      },
      "DESTINATION_BUCKET": {
       "Ref": "videoStorage429F1872"
      },
      "SNS_TOPIC": {
       "Ref": "notificationTopic102BFE2A"
      }
     }
    },
    "FunctionName": "notification-lambda",
    "Handler": "handler.handler_function",
    "LoggingConfig": {
     "ApplicationLogLevel": "DEBUG",
     "LogFormat": "JSON"
    },
    "Role": {
     "Fn::GetAtt": [
      "notificationLambdaRoleE89DA80E",
      "Arn"
     ]
    },
    "Runtime": "python3.13",
    "Timeout": 300
   },
   "DependsOn": [
    "notificationLambdaRoleDefaultPolicy25AFAF3A",
    "notificationLambdaRoleE89DA80E"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/notificiationLambda/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "listActivationsApi34766676": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Description": "list activations",
    "Name": "activationsApi"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Resource"
   }
  },
  "listActivationsApiDeployment6445D7414802716e24844a1c23baba74008eb6ab": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "list activations",
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "DependsOn": [
    "listActivationsApiactivationsDELETE3810230B",
    "listActivationsApiactivationsGETEAC19B07",
    "listActivationsApiactivationsOPTIONS0F6D97EF",
    "listActivationsApiactivationsPUT6D933E03",
    "listActivationsApiactivations70340CE4",
    "listActivationsApiOPTIONSEF6055B0"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Deployment/Resource"
   }
  },
  "listActivationsApiDeploymentStageprodE56C4C89": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "listActivationsApiDeployment6445D7414802716e24844a1c23baba74008eb6ab"
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/DeploymentStage.prod/Resource"
   }
  },
  "listActivationsApiOPTIONSEF6055B0": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "listActivationsApi34766676",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/OPTIONS/Resource"
   }
  },
  "listActivationsApiactivations70340CE4": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "listActivationsApi34766676",
      "RootResourceId"
     ]
    },
    "PathPart": "activations",
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/Resource"
   }
  },
  "listActivationsApiactivationsOPTIONS0F6D97EF": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "listActivationsApiactivations70340CE4"
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/OPTIONS/Resource"
   }
  },
  "listActivationsApiactivationsGETApiPermissionDashboardStacklistActivationsApi72416B88GETactivationsECAED963": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/",
       {
        "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
       },
       "/GET/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/GET/ApiPermission.DashboardStacklistActivationsApi72416B88.GET..activations"
   }
  },
  "listActivationsApiactivationsGETApiPermissionTestDashboardStacklistActivationsApi72416B88GETactivations7BD0ED82": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/test-invoke-stage/GET/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/GET/ApiPermission.Test.DashboardStacklistActivationsApi72416B88.GET..activations"
   }
  },
  "listActivationsApiactivationsGETEAC19B07": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "listApiLambda7E6FD1BC",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "listActivationsApiactivations70340CE4"
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/GET/Resource"
   }
  },
  "listActivationsApiactivationsPUTApiPermissionDashboardStacklistActivationsApi72416B88PUTactivations8DFDAF13": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/",
       {
        "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
       },
       "/PUT/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/PUT/ApiPermission.DashboardStacklistActivationsApi72416B88.PUT..activations"
   }
  },
  "listActivationsApiactivationsPUTApiPermissionTestDashboardStacklistActivationsApi72416B88PUTactivationsD0D075E3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/test-invoke-stage/PUT/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/PUT/ApiPermission.Test.DashboardStacklistActivationsApi72416B88.PUT..activations"
   }
  },
  "listActivationsApiactivationsPUT6D933E03": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "PUT",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "listApiLambda7E6FD1BC",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "listActivationsApiactivations70340CE4"
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/PUT/Resource"
   }
  },
  "listActivationsApiactivationsDELETEApiPermissionDashboardStacklistActivationsApi72416B88DELETEactivationsBC44D925": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/",
       {
        "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
       },
       "/DELETE/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/DELETE/ApiPermission.DashboardStacklistActivationsApi72416B88.DELETE..activations"
   }
  },
  "listActivationsApiactivationsDELETEApiPermissionTestDashboardStacklistActivationsApi72416B88DELETEactivations6D98A5DA": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "listApiLambda7E6FD1BC",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "listActivationsApi34766676"
       },
       "/test-invoke-stage/DELETE/activations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/DELETE/ApiPermission.Test.DashboardStacklistActivationsApi72416B88.DELETE..activations"
   }
  },
  "listActivationsApiactivationsDELETE3810230B": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "DELETE",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "listApiLambda7E6FD1BC",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "ResourceId": {
     "Ref": "listActivationsApiactivations70340CE4"
    },
    "RestApiId": {
     "Ref": "listActivationsApi34766676"
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listActivationsApi/Default/activations/DELETE/Resource"
   }
  },
  "listApiLambdaRole5EC99D0C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "edgelambda.amazonaws.com",
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "cloudWatchLogsPolicy62FA4890"
     }
    ],
    "RoleName": "list-api-lambda-role"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listApiLambdaRole/Resource"
   }
  },
  "listApiLambdaRoleDefaultPolicyE264BACF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "activationTable47DE6EF0",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "activationTable47DE6EF0",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "videoStorage429F1872",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "videoStorage429F1872",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:DeleteObject*",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "videoStorage429F1872",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "listApiLambdaRoleDefaultPolicyE264BACF",
    "Roles": [
     {
      "Ref": "listApiLambdaRole5EC99D0C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listApiLambdaRole/DefaultPolicy/Resource"
   }
  },
  "listApiLambda7E6FD1BC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Ref": "codeBucketName"
     },
     "S3Key": "lambdas/activations-list-1683057a834cfd8aa697575be5cda412.zip"
    },
    "Description": "respond to api requests for lists of notification",
    "Environment": {
     "Variables": {
      "DYNAMODB_TABLE": {
       "Ref": "activationTable47DE6EF0"
      },
      "VIDEO_CLIP_BUCKET": {
       "Ref": "videoStorage429F1872"
      }
     }
    },
    "FunctionName": "list-api-lambda",
    "Handler": "handler.handler_function",
    "LoggingConfig": {
     "ApplicationLogLevel": "DEBUG",
     "LogFormat": "JSON"
    },
    "Role": {
     "Fn::GetAtt": [
      "listApiLambdaRole5EC99D0C",
      "Arn"
     ]
    },
    "Runtime": "python3.13",
    "Timeout": 300
   },
   "DependsOn": [
    "listApiLambdaRoleDefaultPolicyE264BACF",
    "listApiLambdaRole5EC99D0C"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/listApiLambda/Resource"
   }
  },
  "apiCustomResourceLambdaRole21EECA64": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "edgelambda.amazonaws.com",
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "cloudWatchLogsPolicy62FA4890"
     }
    ],
    "RoleName": "api-custom-resource-lambda-role"
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/apiCustomResourceLambdaRole/Resource"
   }
  },
  "apiCustomResourceLambdaRoleDefaultPolicyE8E35933": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "configBucketED6325D8",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "configBucketED6325D8",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "apiCustomResourceLambdaRoleDefaultPolicyE8E35933",
    "Roles": [
     {
      "Ref": "apiCustomResourceLambdaRole21EECA64"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/apiCustomResourceLambdaRole/DefaultPolicy/Resource"
   }
  },
  "apiLocationOutputF7F2EBC6": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Ref": "codeBucketName"
     },
     "S3Key": "lambdas/api-location-output-64e855c2fe32ecf4417d9d39abfcb5ea.zip"
    },
    "Description": "output API address",
    "Environment": {
     "Variables": {
      "API_ENDPOINT": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Ref": "listActivationsApi34766676"
         },
         ".execute-api.",
         {
          "Ref": "AWS::Region"
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
         },
         "/"
        ]
       ]
      },
      "CONFIG_BUCKET": {
       "Ref": "configBucketED6325D8"
      }
     }
    },
    "FunctionName": "api-location-output",
    "Handler": "handler.handler_function",
    "LoggingConfig": {
     "ApplicationLogLevel": "DEBUG",
     "LogFormat": "JSON"
    },
    "Role": {
     "Fn::GetAtt": [
      "apiCustomResourceLambdaRole21EECA64",
      "Arn"
     ]
    },
    "Runtime": "python3.13",
    "Timeout": 300
   },
   "DependsOn": [
    "apiCustomResourceLambdaRoleDefaultPolicyE8E35933",
    "apiCustomResourceLambdaRole21EECA64"
   ],
   "Metadata": {
    "aws:cdk:path": "DashboardStack/apiLocationOutput/Resource"
   }
  },
  "apiLocationOutputCustomResource": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "apiLocationOutputF7F2EBC6",
      "Arn"
     ]
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "DashboardStack/apiLocationOutputCustomResource/Default"
   }
  },
  "domainNameParam5AB6B878": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "DataType": "text",
    "Description": "Domain Name",
    "Name": "domain-name",
    "Tier": "Standard",
    "Type": "String",
    "Value": {
     "Fn::Join": [
      "",
      [
       "https://",
       {
        "Ref": "listActivationsApi34766676"
       },
       ".execute-api.",
       {
        "Ref": "AWS::Region"
       },
       ".",
       {
        "Ref": "AWS::URLSuffix"
       },
       "/",
       {
        "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
       },
       "/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "DashboardStack/domainNameParam/Resource"
   }
  }
 },
 "Outputs": {
  "listActivationsApiEndpoint913BCE36": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "listActivationsApi34766676"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
      },
      "/"
     ]
    ]
   }
  },
  "apiDomainName": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "listActivationsApi34766676"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "listActivationsApiDeploymentStageprodE56C4C89"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {},
 "Rules": {}
}